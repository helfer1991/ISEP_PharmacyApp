package lapr.project.model;

import java.util.Objects;

/**
 * Stores the information read from the file generated by the Parking System
 */
public class ParkSensorFile {


    /**
     * Int with the vehicle identifier
     */
    private final int vehicleId;

    /**
     * Int with the battery capacity for this vehicle (p.e A/h)
     */
    private final int vehicleBatteryCapacity;

    /**
     * Int with the percentage of battery charge remaining (p.e 70%)
     */
    private int vehicleBatteryPercentage;

    /**
     * Double containing an estimate of the amount of time it will take for the vehicle battery to be fully charged (p.e. 55.5min)
     */
    private final double estimatedTimeToFullCharge;

    /**
     * String with timeStamp from the park system file ('yyyy_mm_dd_hh_mm_ss')
     */
    private final String timeStamp;

    /**
     * True if the time estimate contained is the file is a reestimate and not the original estimate
     */
    private boolean reestimate;

    /**
     *  Constructor with all the
     * @param vehicleId vehicle identifier
     * @param vehicleBatteryCapacity capacity of the battery of the vehicle
     * @param vehicleBatteryPercentage percentage of the remaining battery charge
     * @param estimatedTimeToFullCharge time estimate of how long it will take to be fully charged (in minutes)
     * @param timestamp timestamp read from the park system file ('yyyy_mm_dd_hh_mm_ss')
     */
    public ParkSensorFile(int vehicleId, int vehicleBatteryCapacity, int vehicleBatteryPercentage,
                          double estimatedTimeToFullCharge, String timestamp) {
        this.vehicleId = vehicleId;
        this.vehicleBatteryCapacity = vehicleBatteryCapacity;
        this.vehicleBatteryPercentage = vehicleBatteryPercentage;
        this.estimatedTimeToFullCharge = estimatedTimeToFullCharge;
        this.timeStamp = timestamp;
    }


    /**
     Getter method for the reestimate attribute
     * @return
     */
    public boolean isReestimate() {
        return reestimate;
    }

    /**
     Getter method for the reestimate attribute
     * @param reestimate
     */
    public void setReestimate(boolean reestimate) {
        this.reestimate = reestimate;
    }

    /**
     * Getter method for the vehicleId attribute
     * @return int with the vehicleId identifier
     */
    public int getVehicleId() {
        return vehicleId;
    }

    /**
     * Getter method for the BatteryCapacity attribute
     * @return int with the battery capacity for this vehicle
     */
    public int getVehicleBatteryCapacity() {
        return vehicleBatteryCapacity;
    }

    /**
     * Getter method for the BatteryPercentage attribute
     * @return int with the percentage of battery charge remaining
     */
    public int getVehicleBatteryPercentage() {
        return vehicleBatteryPercentage;
    }

    /**
     * Getter method for the EstimatedTimeToFullCharge attribute
     * @return double with the minutes it will take for the vehicle battery to be fully charged
     */
    public double getEstimatedTimeToFullCharge() {
        return estimatedTimeToFullCharge;
    }

    /**
     * Getter method for the TimeStamp attribute
     * @return string with timeStamp from the park system file ('yyyy_mm_dd_hh_mm_ss')
     */
    public String getTimeStamp() {
        return timeStamp;
    }

    public void setVehicleBatteryPercentage(int vehicleBatteryPercentage) {
        this.vehicleBatteryPercentage = vehicleBatteryPercentage;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null
                || getClass() != o.getClass())
            return false;

        ParkSensorFile that = (ParkSensorFile) o;
        return getVehicleId() == that.getVehicleId() && getVehicleBatteryCapacity() == that.getVehicleBatteryCapacity()
                && getVehicleBatteryPercentage() == that.getVehicleBatteryPercentage()
                && Double.compare(that.getEstimatedTimeToFullCharge(), getEstimatedTimeToFullCharge()) == 0
                && getTimeStamp().equals(that.getTimeStamp());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getVehicleId(), getVehicleBatteryCapacity(), getVehicleBatteryPercentage(), getEstimatedTimeToFullCharge(), getTimeStamp());
    }


}
